
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model cards
 * 
 */
export type cards = {
  id: number
  userId: number
  title: string
  number: bigint
  name: string
  cvc: number
  date: Date
  password: string
  isVirtual: boolean
  type: cardType | null
}

/**
 * Model credentials
 * 
 */
export type credentials = {
  id: number
  userId: number
  title: string
  url: string
  userName: string
  password: string
}

/**
 * Model documents
 * 
 */
export type documents = {
  id: number
  userId: number
  type: docType | null
  fullName: string
  issueDate: Date
  expirationDate: Date
  number: bigint
  issueInstitution: string
}

/**
 * Model notes
 * 
 */
export type notes = {
  id: number
  userId: number
  title: string
  noteText: string
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  email: string
  password: string
}

/**
 * Model wifi
 * 
 */
export type wifi = {
  id: number
  userId: number
  name: string
  password: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const cardType: {
  credit: 'credit',
  debit: 'debit',
  creditAndDebit: 'creditAndDebit'
};

export type cardType = (typeof cardType)[keyof typeof cardType]


export const docType: {
  rg: 'rg',
  cnh: 'cnh'
};

export type docType = (typeof docType)[keyof typeof docType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cards
 * const cards = await prisma.cards.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cards
   * const cards = await prisma.cards.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.cards`: Exposes CRUD operations for the **cards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.cards.findMany()
    * ```
    */
  get cards(): Prisma.cardsDelegate<GlobalReject>;

  /**
   * `prisma.credentials`: Exposes CRUD operations for the **credentials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credentials.findMany()
    * ```
    */
  get credentials(): Prisma.credentialsDelegate<GlobalReject>;

  /**
   * `prisma.documents`: Exposes CRUD operations for the **documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.documents.findMany()
    * ```
    */
  get documents(): Prisma.documentsDelegate<GlobalReject>;

  /**
   * `prisma.notes`: Exposes CRUD operations for the **notes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.notes.findMany()
    * ```
    */
  get notes(): Prisma.notesDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.wifi`: Exposes CRUD operations for the **wifi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wifis
    * const wifis = await prisma.wifi.findMany()
    * ```
    */
  get wifi(): Prisma.wifiDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    cards: 'cards',
    credentials: 'credentials',
    documents: 'documents',
    notes: 'notes',
    users: 'users',
    wifi: 'wifi'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    cards: number
    credentials: number
    documents: number
    notes: number
    wifi: number
  }

  export type UsersCountOutputTypeSelect = {
    cards?: boolean
    credentials?: boolean
    documents?: boolean
    notes?: boolean
    wifi?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model cards
   */


  export type AggregateCards = {
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  export type CardsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
    cvc: number | null
  }

  export type CardsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    number: bigint | null
    cvc: number | null
  }

  export type CardsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    number: bigint | null
    name: string | null
    cvc: number | null
    date: Date | null
    password: string | null
    isVirtual: boolean | null
    type: cardType | null
  }

  export type CardsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    number: bigint | null
    name: string | null
    cvc: number | null
    date: Date | null
    password: string | null
    isVirtual: boolean | null
    type: cardType | null
  }

  export type CardsCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    number: number
    name: number
    cvc: number
    date: number
    password: number
    isVirtual: number
    type: number
    _all: number
  }


  export type CardsAvgAggregateInputType = {
    id?: true
    userId?: true
    number?: true
    cvc?: true
  }

  export type CardsSumAggregateInputType = {
    id?: true
    userId?: true
    number?: true
    cvc?: true
  }

  export type CardsMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    number?: true
    name?: true
    cvc?: true
    date?: true
    password?: true
    isVirtual?: true
    type?: true
  }

  export type CardsMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    number?: true
    name?: true
    cvc?: true
    date?: true
    password?: true
    isVirtual?: true
    type?: true
  }

  export type CardsCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    number?: true
    name?: true
    cvc?: true
    date?: true
    password?: true
    isVirtual?: true
    type?: true
    _all?: true
  }

  export type CardsAggregateArgs = {
    /**
     * Filter which cards to aggregate.
     * 
    **/
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     * 
    **/
    orderBy?: Enumerable<cardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cards
    **/
    _count?: true | CardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardsMaxAggregateInputType
  }

  export type GetCardsAggregateType<T extends CardsAggregateArgs> = {
        [P in keyof T & keyof AggregateCards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCards[P]>
      : GetScalarType<T[P], AggregateCards[P]>
  }




  export type CardsGroupByArgs = {
    where?: cardsWhereInput
    orderBy?: Enumerable<cardsOrderByWithAggregationInput>
    by: Array<CardsScalarFieldEnum>
    having?: cardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardsCountAggregateInputType | true
    _avg?: CardsAvgAggregateInputType
    _sum?: CardsSumAggregateInputType
    _min?: CardsMinAggregateInputType
    _max?: CardsMaxAggregateInputType
  }


  export type CardsGroupByOutputType = {
    id: number
    userId: number
    title: string
    number: bigint
    name: string
    cvc: number
    date: Date
    password: string
    isVirtual: boolean
    type: cardType | null
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  type GetCardsGroupByPayload<T extends CardsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardsGroupByOutputType[P]>
            : GetScalarType<T[P], CardsGroupByOutputType[P]>
        }
      >
    >


  export type cardsSelect = {
    id?: boolean
    userId?: boolean
    title?: boolean
    number?: boolean
    name?: boolean
    cvc?: boolean
    date?: boolean
    password?: boolean
    isVirtual?: boolean
    type?: boolean
    users?: boolean | usersArgs
  }

  export type cardsInclude = {
    users?: boolean | usersArgs
  }

  export type cardsGetPayload<
    S extends boolean | null | undefined | cardsArgs,
    U = keyof S
      > = S extends true
        ? cards
    : S extends undefined
    ? never
    : S extends cardsArgs | cardsFindManyArgs
    ?'include' extends U
    ? cards  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof cards ? cards[P] : never
  } 
    : cards
  : cards


  type cardsCountArgs = Merge<
    Omit<cardsFindManyArgs, 'select' | 'include'> & {
      select?: CardsCountAggregateInputType | true
    }
  >

  export interface cardsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cards that matches the filter.
     * @param {cardsFindUniqueArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cardsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cardsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cards'> extends True ? CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>> : CheckSelect<T, Prisma__cardsClient<cards | null >, Prisma__cardsClient<cardsGetPayload<T> | null >>

    /**
     * Find the first Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindFirstArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cardsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cardsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cards'> extends True ? CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>> : CheckSelect<T, Prisma__cardsClient<cards | null >, Prisma__cardsClient<cardsGetPayload<T> | null >>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.cards.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.cards.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardsWithIdOnly = await prisma.cards.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cardsFindManyArgs>(
      args?: SelectSubset<T, cardsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<cards>>, PrismaPromise<Array<cardsGetPayload<T>>>>

    /**
     * Create a Cards.
     * @param {cardsCreateArgs} args - Arguments to create a Cards.
     * @example
     * // Create one Cards
     * const Cards = await prisma.cards.create({
     *   data: {
     *     // ... data to create a Cards
     *   }
     * })
     * 
    **/
    create<T extends cardsCreateArgs>(
      args: SelectSubset<T, cardsCreateArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Create many Cards.
     *     @param {cardsCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const cards = await prisma.cards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cardsCreateManyArgs>(
      args?: SelectSubset<T, cardsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cards.
     * @param {cardsDeleteArgs} args - Arguments to delete one Cards.
     * @example
     * // Delete one Cards
     * const Cards = await prisma.cards.delete({
     *   where: {
     *     // ... filter to delete one Cards
     *   }
     * })
     * 
    **/
    delete<T extends cardsDeleteArgs>(
      args: SelectSubset<T, cardsDeleteArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Update one Cards.
     * @param {cardsUpdateArgs} args - Arguments to update one Cards.
     * @example
     * // Update one Cards
     * const cards = await prisma.cards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cardsUpdateArgs>(
      args: SelectSubset<T, cardsUpdateArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Delete zero or more Cards.
     * @param {cardsDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.cards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cardsDeleteManyArgs>(
      args?: SelectSubset<T, cardsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const cards = await prisma.cards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cardsUpdateManyArgs>(
      args: SelectSubset<T, cardsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cards.
     * @param {cardsUpsertArgs} args - Arguments to update or create a Cards.
     * @example
     * // Update or create a Cards
     * const cards = await prisma.cards.upsert({
     *   create: {
     *     // ... data to create a Cards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cards we want to update
     *   }
     * })
    **/
    upsert<T extends cardsUpsertArgs>(
      args: SelectSubset<T, cardsUpsertArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Find one Cards that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {cardsFindUniqueOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cardsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, cardsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Find the first Cards that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindFirstOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cardsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, cardsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__cardsClient<cards>, Prisma__cardsClient<cardsGetPayload<T>>>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.cards.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends cardsCountArgs>(
      args?: Subset<T, cardsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardsAggregateArgs>(args: Subset<T, CardsAggregateArgs>): PrismaPromise<GetCardsAggregateType<T>>

    /**
     * Group by Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardsGroupByArgs['orderBy'] }
        : { orderBy?: CardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cardsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cards base type for findUnique actions
   */
  export type cardsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * Filter, which cards to fetch.
     * 
    **/
    where: cardsWhereUniqueInput
  }

  /**
   * cards: findUnique
   */
  export interface cardsFindUniqueArgs extends cardsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cards base type for findFirst actions
   */
  export type cardsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * Filter, which cards to fetch.
     * 
    **/
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     * 
    **/
    orderBy?: Enumerable<cardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cards.
     * 
    **/
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cards.
     * 
    **/
    distinct?: Enumerable<CardsScalarFieldEnum>
  }

  /**
   * cards: findFirst
   */
  export interface cardsFindFirstArgs extends cardsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cards findMany
   */
  export type cardsFindManyArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * Filter, which cards to fetch.
     * 
    **/
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     * 
    **/
    orderBy?: Enumerable<cardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cards.
     * 
    **/
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CardsScalarFieldEnum>
  }


  /**
   * cards create
   */
  export type cardsCreateArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * The data needed to create a cards.
     * 
    **/
    data: XOR<cardsCreateInput, cardsUncheckedCreateInput>
  }


  /**
   * cards createMany
   */
  export type cardsCreateManyArgs = {
    /**
     * The data used to create many cards.
     * 
    **/
    data: Enumerable<cardsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cards update
   */
  export type cardsUpdateArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * The data needed to update a cards.
     * 
    **/
    data: XOR<cardsUpdateInput, cardsUncheckedUpdateInput>
    /**
     * Choose, which cards to update.
     * 
    **/
    where: cardsWhereUniqueInput
  }


  /**
   * cards updateMany
   */
  export type cardsUpdateManyArgs = {
    /**
     * The data used to update cards.
     * 
    **/
    data: XOR<cardsUpdateManyMutationInput, cardsUncheckedUpdateManyInput>
    /**
     * Filter which cards to update
     * 
    **/
    where?: cardsWhereInput
  }


  /**
   * cards upsert
   */
  export type cardsUpsertArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * The filter to search for the cards to update in case it exists.
     * 
    **/
    where: cardsWhereUniqueInput
    /**
     * In case the cards found by the `where` argument doesn't exist, create a new cards with this data.
     * 
    **/
    create: XOR<cardsCreateInput, cardsUncheckedCreateInput>
    /**
     * In case the cards was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<cardsUpdateInput, cardsUncheckedUpdateInput>
  }


  /**
   * cards delete
   */
  export type cardsDeleteArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
    /**
     * Filter which cards to delete.
     * 
    **/
    where: cardsWhereUniqueInput
  }


  /**
   * cards deleteMany
   */
  export type cardsDeleteManyArgs = {
    /**
     * Filter which cards to delete
     * 
    **/
    where?: cardsWhereInput
  }


  /**
   * cards: findUniqueOrThrow
   */
  export type cardsFindUniqueOrThrowArgs = cardsFindUniqueArgsBase
      

  /**
   * cards: findFirstOrThrow
   */
  export type cardsFindFirstOrThrowArgs = cardsFindFirstArgsBase
      

  /**
   * cards without action
   */
  export type cardsArgs = {
    /**
     * Select specific fields to fetch from the cards
     * 
    **/
    select?: cardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cardsInclude | null
  }



  /**
   * Model credentials
   */


  export type AggregateCredentials = {
    _count: CredentialsCountAggregateOutputType | null
    _avg: CredentialsAvgAggregateOutputType | null
    _sum: CredentialsSumAggregateOutputType | null
    _min: CredentialsMinAggregateOutputType | null
    _max: CredentialsMaxAggregateOutputType | null
  }

  export type CredentialsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CredentialsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CredentialsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    url: string | null
    userName: string | null
    password: string | null
  }

  export type CredentialsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    url: string | null
    userName: string | null
    password: string | null
  }

  export type CredentialsCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    url: number
    userName: number
    password: number
    _all: number
  }


  export type CredentialsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialsMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    url?: true
    userName?: true
    password?: true
  }

  export type CredentialsMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    url?: true
    userName?: true
    password?: true
  }

  export type CredentialsCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    url?: true
    userName?: true
    password?: true
    _all?: true
  }

  export type CredentialsAggregateArgs = {
    /**
     * Filter which credentials to aggregate.
     * 
    **/
    where?: credentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<credentialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: credentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned credentials
    **/
    _count?: true | CredentialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredentialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredentialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialsMaxAggregateInputType
  }

  export type GetCredentialsAggregateType<T extends CredentialsAggregateArgs> = {
        [P in keyof T & keyof AggregateCredentials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredentials[P]>
      : GetScalarType<T[P], AggregateCredentials[P]>
  }




  export type CredentialsGroupByArgs = {
    where?: credentialsWhereInput
    orderBy?: Enumerable<credentialsOrderByWithAggregationInput>
    by: Array<CredentialsScalarFieldEnum>
    having?: credentialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialsCountAggregateInputType | true
    _avg?: CredentialsAvgAggregateInputType
    _sum?: CredentialsSumAggregateInputType
    _min?: CredentialsMinAggregateInputType
    _max?: CredentialsMaxAggregateInputType
  }


  export type CredentialsGroupByOutputType = {
    id: number
    userId: number
    title: string
    url: string
    userName: string
    password: string
    _count: CredentialsCountAggregateOutputType | null
    _avg: CredentialsAvgAggregateOutputType | null
    _sum: CredentialsSumAggregateOutputType | null
    _min: CredentialsMinAggregateOutputType | null
    _max: CredentialsMaxAggregateOutputType | null
  }

  type GetCredentialsGroupByPayload<T extends CredentialsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CredentialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialsGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialsGroupByOutputType[P]>
        }
      >
    >


  export type credentialsSelect = {
    id?: boolean
    userId?: boolean
    title?: boolean
    url?: boolean
    userName?: boolean
    password?: boolean
    users?: boolean | usersArgs
  }

  export type credentialsInclude = {
    users?: boolean | usersArgs
  }

  export type credentialsGetPayload<
    S extends boolean | null | undefined | credentialsArgs,
    U = keyof S
      > = S extends true
        ? credentials
    : S extends undefined
    ? never
    : S extends credentialsArgs | credentialsFindManyArgs
    ?'include' extends U
    ? credentials  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof credentials ? credentials[P] : never
  } 
    : credentials
  : credentials


  type credentialsCountArgs = Merge<
    Omit<credentialsFindManyArgs, 'select' | 'include'> & {
      select?: CredentialsCountAggregateInputType | true
    }
  >

  export interface credentialsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Credentials that matches the filter.
     * @param {credentialsFindUniqueArgs} args - Arguments to find a Credentials
     * @example
     * // Get one Credentials
     * const credentials = await prisma.credentials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends credentialsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, credentialsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'credentials'> extends True ? CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>> : CheckSelect<T, Prisma__credentialsClient<credentials | null >, Prisma__credentialsClient<credentialsGetPayload<T> | null >>

    /**
     * Find the first Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialsFindFirstArgs} args - Arguments to find a Credentials
     * @example
     * // Get one Credentials
     * const credentials = await prisma.credentials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends credentialsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, credentialsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'credentials'> extends True ? CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>> : CheckSelect<T, Prisma__credentialsClient<credentials | null >, Prisma__credentialsClient<credentialsGetPayload<T> | null >>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credentials.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credentials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credentialsWithIdOnly = await prisma.credentials.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends credentialsFindManyArgs>(
      args?: SelectSubset<T, credentialsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<credentials>>, PrismaPromise<Array<credentialsGetPayload<T>>>>

    /**
     * Create a Credentials.
     * @param {credentialsCreateArgs} args - Arguments to create a Credentials.
     * @example
     * // Create one Credentials
     * const Credentials = await prisma.credentials.create({
     *   data: {
     *     // ... data to create a Credentials
     *   }
     * })
     * 
    **/
    create<T extends credentialsCreateArgs>(
      args: SelectSubset<T, credentialsCreateArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Create many Credentials.
     *     @param {credentialsCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credentials = await prisma.credentials.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends credentialsCreateManyArgs>(
      args?: SelectSubset<T, credentialsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Credentials.
     * @param {credentialsDeleteArgs} args - Arguments to delete one Credentials.
     * @example
     * // Delete one Credentials
     * const Credentials = await prisma.credentials.delete({
     *   where: {
     *     // ... filter to delete one Credentials
     *   }
     * })
     * 
    **/
    delete<T extends credentialsDeleteArgs>(
      args: SelectSubset<T, credentialsDeleteArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Update one Credentials.
     * @param {credentialsUpdateArgs} args - Arguments to update one Credentials.
     * @example
     * // Update one Credentials
     * const credentials = await prisma.credentials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends credentialsUpdateArgs>(
      args: SelectSubset<T, credentialsUpdateArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Delete zero or more Credentials.
     * @param {credentialsDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credentials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends credentialsDeleteManyArgs>(
      args?: SelectSubset<T, credentialsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credentials = await prisma.credentials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends credentialsUpdateManyArgs>(
      args: SelectSubset<T, credentialsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credentials.
     * @param {credentialsUpsertArgs} args - Arguments to update or create a Credentials.
     * @example
     * // Update or create a Credentials
     * const credentials = await prisma.credentials.upsert({
     *   create: {
     *     // ... data to create a Credentials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credentials we want to update
     *   }
     * })
    **/
    upsert<T extends credentialsUpsertArgs>(
      args: SelectSubset<T, credentialsUpsertArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Find one Credentials that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {credentialsFindUniqueOrThrowArgs} args - Arguments to find a Credentials
     * @example
     * // Get one Credentials
     * const credentials = await prisma.credentials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends credentialsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, credentialsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Find the first Credentials that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialsFindFirstOrThrowArgs} args - Arguments to find a Credentials
     * @example
     * // Get one Credentials
     * const credentials = await prisma.credentials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends credentialsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, credentialsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__credentialsClient<credentials>, Prisma__credentialsClient<credentialsGetPayload<T>>>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialsCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credentials.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends credentialsCountArgs>(
      args?: Subset<T, credentialsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialsAggregateArgs>(args: Subset<T, CredentialsAggregateArgs>): PrismaPromise<GetCredentialsAggregateType<T>>

    /**
     * Group by Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialsGroupByArgs['orderBy'] }
        : { orderBy?: CredentialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for credentials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__credentialsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * credentials base type for findUnique actions
   */
  export type credentialsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * Filter, which credentials to fetch.
     * 
    **/
    where: credentialsWhereUniqueInput
  }

  /**
   * credentials: findUnique
   */
  export interface credentialsFindUniqueArgs extends credentialsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * credentials base type for findFirst actions
   */
  export type credentialsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * Filter, which credentials to fetch.
     * 
    **/
    where?: credentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<credentialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for credentials.
     * 
    **/
    cursor?: credentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of credentials.
     * 
    **/
    distinct?: Enumerable<CredentialsScalarFieldEnum>
  }

  /**
   * credentials: findFirst
   */
  export interface credentialsFindFirstArgs extends credentialsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * credentials findMany
   */
  export type credentialsFindManyArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * Filter, which credentials to fetch.
     * 
    **/
    where?: credentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<credentialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing credentials.
     * 
    **/
    cursor?: credentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CredentialsScalarFieldEnum>
  }


  /**
   * credentials create
   */
  export type credentialsCreateArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * The data needed to create a credentials.
     * 
    **/
    data: XOR<credentialsCreateInput, credentialsUncheckedCreateInput>
  }


  /**
   * credentials createMany
   */
  export type credentialsCreateManyArgs = {
    /**
     * The data used to create many credentials.
     * 
    **/
    data: Enumerable<credentialsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * credentials update
   */
  export type credentialsUpdateArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * The data needed to update a credentials.
     * 
    **/
    data: XOR<credentialsUpdateInput, credentialsUncheckedUpdateInput>
    /**
     * Choose, which credentials to update.
     * 
    **/
    where: credentialsWhereUniqueInput
  }


  /**
   * credentials updateMany
   */
  export type credentialsUpdateManyArgs = {
    /**
     * The data used to update credentials.
     * 
    **/
    data: XOR<credentialsUpdateManyMutationInput, credentialsUncheckedUpdateManyInput>
    /**
     * Filter which credentials to update
     * 
    **/
    where?: credentialsWhereInput
  }


  /**
   * credentials upsert
   */
  export type credentialsUpsertArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * The filter to search for the credentials to update in case it exists.
     * 
    **/
    where: credentialsWhereUniqueInput
    /**
     * In case the credentials found by the `where` argument doesn't exist, create a new credentials with this data.
     * 
    **/
    create: XOR<credentialsCreateInput, credentialsUncheckedCreateInput>
    /**
     * In case the credentials was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<credentialsUpdateInput, credentialsUncheckedUpdateInput>
  }


  /**
   * credentials delete
   */
  export type credentialsDeleteArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
    /**
     * Filter which credentials to delete.
     * 
    **/
    where: credentialsWhereUniqueInput
  }


  /**
   * credentials deleteMany
   */
  export type credentialsDeleteManyArgs = {
    /**
     * Filter which credentials to delete
     * 
    **/
    where?: credentialsWhereInput
  }


  /**
   * credentials: findUniqueOrThrow
   */
  export type credentialsFindUniqueOrThrowArgs = credentialsFindUniqueArgsBase
      

  /**
   * credentials: findFirstOrThrow
   */
  export type credentialsFindFirstOrThrowArgs = credentialsFindFirstArgsBase
      

  /**
   * credentials without action
   */
  export type credentialsArgs = {
    /**
     * Select specific fields to fetch from the credentials
     * 
    **/
    select?: credentialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: credentialsInclude | null
  }



  /**
   * Model documents
   */


  export type AggregateDocuments = {
    _count: DocumentsCountAggregateOutputType | null
    _avg: DocumentsAvgAggregateOutputType | null
    _sum: DocumentsSumAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  export type DocumentsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
  }

  export type DocumentsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    number: bigint | null
  }

  export type DocumentsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    type: docType | null
    fullName: string | null
    issueDate: Date | null
    expirationDate: Date | null
    number: bigint | null
    issueInstitution: string | null
  }

  export type DocumentsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    type: docType | null
    fullName: string | null
    issueDate: Date | null
    expirationDate: Date | null
    number: bigint | null
    issueInstitution: string | null
  }

  export type DocumentsCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    fullName: number
    issueDate: number
    expirationDate: number
    number: number
    issueInstitution: number
    _all: number
  }


  export type DocumentsAvgAggregateInputType = {
    id?: true
    userId?: true
    number?: true
  }

  export type DocumentsSumAggregateInputType = {
    id?: true
    userId?: true
    number?: true
  }

  export type DocumentsMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    issueDate?: true
    expirationDate?: true
    number?: true
    issueInstitution?: true
  }

  export type DocumentsMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    issueDate?: true
    expirationDate?: true
    number?: true
    issueInstitution?: true
  }

  export type DocumentsCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    issueDate?: true
    expirationDate?: true
    number?: true
    issueInstitution?: true
    _all?: true
  }

  export type DocumentsAggregateArgs = {
    /**
     * Filter which documents to aggregate.
     * 
    **/
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     * 
    **/
    orderBy?: Enumerable<documentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned documents
    **/
    _count?: true | DocumentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentsMaxAggregateInputType
  }

  export type GetDocumentsAggregateType<T extends DocumentsAggregateArgs> = {
        [P in keyof T & keyof AggregateDocuments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocuments[P]>
      : GetScalarType<T[P], AggregateDocuments[P]>
  }




  export type DocumentsGroupByArgs = {
    where?: documentsWhereInput
    orderBy?: Enumerable<documentsOrderByWithAggregationInput>
    by: Array<DocumentsScalarFieldEnum>
    having?: documentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentsCountAggregateInputType | true
    _avg?: DocumentsAvgAggregateInputType
    _sum?: DocumentsSumAggregateInputType
    _min?: DocumentsMinAggregateInputType
    _max?: DocumentsMaxAggregateInputType
  }


  export type DocumentsGroupByOutputType = {
    id: number
    userId: number
    type: docType | null
    fullName: string
    issueDate: Date
    expirationDate: Date
    number: bigint
    issueInstitution: string
    _count: DocumentsCountAggregateOutputType | null
    _avg: DocumentsAvgAggregateOutputType | null
    _sum: DocumentsSumAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  type GetDocumentsGroupByPayload<T extends DocumentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DocumentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
        }
      >
    >


  export type documentsSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    fullName?: boolean
    issueDate?: boolean
    expirationDate?: boolean
    number?: boolean
    issueInstitution?: boolean
    users?: boolean | usersArgs
  }

  export type documentsInclude = {
    users?: boolean | usersArgs
  }

  export type documentsGetPayload<
    S extends boolean | null | undefined | documentsArgs,
    U = keyof S
      > = S extends true
        ? documents
    : S extends undefined
    ? never
    : S extends documentsArgs | documentsFindManyArgs
    ?'include' extends U
    ? documents  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof documents ? documents[P] : never
  } 
    : documents
  : documents


  type documentsCountArgs = Merge<
    Omit<documentsFindManyArgs, 'select' | 'include'> & {
      select?: DocumentsCountAggregateInputType | true
    }
  >

  export interface documentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Documents that matches the filter.
     * @param {documentsFindUniqueArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends documentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, documentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'documents'> extends True ? CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>> : CheckSelect<T, Prisma__documentsClient<documents | null >, Prisma__documentsClient<documentsGetPayload<T> | null >>

    /**
     * Find the first Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindFirstArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends documentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, documentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'documents'> extends True ? CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>> : CheckSelect<T, Prisma__documentsClient<documents | null >, Prisma__documentsClient<documentsGetPayload<T> | null >>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.documents.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.documents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentsWithIdOnly = await prisma.documents.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends documentsFindManyArgs>(
      args?: SelectSubset<T, documentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<documents>>, PrismaPromise<Array<documentsGetPayload<T>>>>

    /**
     * Create a Documents.
     * @param {documentsCreateArgs} args - Arguments to create a Documents.
     * @example
     * // Create one Documents
     * const Documents = await prisma.documents.create({
     *   data: {
     *     // ... data to create a Documents
     *   }
     * })
     * 
    **/
    create<T extends documentsCreateArgs>(
      args: SelectSubset<T, documentsCreateArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Create many Documents.
     *     @param {documentsCreateManyArgs} args - Arguments to create many Documents.
     *     @example
     *     // Create many Documents
     *     const documents = await prisma.documents.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends documentsCreateManyArgs>(
      args?: SelectSubset<T, documentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Documents.
     * @param {documentsDeleteArgs} args - Arguments to delete one Documents.
     * @example
     * // Delete one Documents
     * const Documents = await prisma.documents.delete({
     *   where: {
     *     // ... filter to delete one Documents
     *   }
     * })
     * 
    **/
    delete<T extends documentsDeleteArgs>(
      args: SelectSubset<T, documentsDeleteArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Update one Documents.
     * @param {documentsUpdateArgs} args - Arguments to update one Documents.
     * @example
     * // Update one Documents
     * const documents = await prisma.documents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends documentsUpdateArgs>(
      args: SelectSubset<T, documentsUpdateArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Delete zero or more Documents.
     * @param {documentsDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.documents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends documentsDeleteManyArgs>(
      args?: SelectSubset<T, documentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const documents = await prisma.documents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends documentsUpdateManyArgs>(
      args: SelectSubset<T, documentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Documents.
     * @param {documentsUpsertArgs} args - Arguments to update or create a Documents.
     * @example
     * // Update or create a Documents
     * const documents = await prisma.documents.upsert({
     *   create: {
     *     // ... data to create a Documents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documents we want to update
     *   }
     * })
    **/
    upsert<T extends documentsUpsertArgs>(
      args: SelectSubset<T, documentsUpsertArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Find one Documents that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {documentsFindUniqueOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends documentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, documentsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Find the first Documents that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsFindFirstOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends documentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, documentsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__documentsClient<documents>, Prisma__documentsClient<documentsGetPayload<T>>>

    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentsCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.documents.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends documentsCountArgs>(
      args?: Subset<T, documentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentsAggregateArgs>(args: Subset<T, DocumentsAggregateArgs>): PrismaPromise<GetDocumentsAggregateType<T>>

    /**
     * Group by Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentsGroupByArgs['orderBy'] }
        : { orderBy?: DocumentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for documents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__documentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * documents base type for findUnique actions
   */
  export type documentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * Filter, which documents to fetch.
     * 
    **/
    where: documentsWhereUniqueInput
  }

  /**
   * documents: findUnique
   */
  export interface documentsFindUniqueArgs extends documentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * documents base type for findFirst actions
   */
  export type documentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * Filter, which documents to fetch.
     * 
    **/
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     * 
    **/
    orderBy?: Enumerable<documentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documents.
     * 
    **/
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documents.
     * 
    **/
    distinct?: Enumerable<DocumentsScalarFieldEnum>
  }

  /**
   * documents: findFirst
   */
  export interface documentsFindFirstArgs extends documentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * documents findMany
   */
  export type documentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * Filter, which documents to fetch.
     * 
    **/
    where?: documentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     * 
    **/
    orderBy?: Enumerable<documentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing documents.
     * 
    **/
    cursor?: documentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DocumentsScalarFieldEnum>
  }


  /**
   * documents create
   */
  export type documentsCreateArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * The data needed to create a documents.
     * 
    **/
    data: XOR<documentsCreateInput, documentsUncheckedCreateInput>
  }


  /**
   * documents createMany
   */
  export type documentsCreateManyArgs = {
    /**
     * The data used to create many documents.
     * 
    **/
    data: Enumerable<documentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * documents update
   */
  export type documentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * The data needed to update a documents.
     * 
    **/
    data: XOR<documentsUpdateInput, documentsUncheckedUpdateInput>
    /**
     * Choose, which documents to update.
     * 
    **/
    where: documentsWhereUniqueInput
  }


  /**
   * documents updateMany
   */
  export type documentsUpdateManyArgs = {
    /**
     * The data used to update documents.
     * 
    **/
    data: XOR<documentsUpdateManyMutationInput, documentsUncheckedUpdateManyInput>
    /**
     * Filter which documents to update
     * 
    **/
    where?: documentsWhereInput
  }


  /**
   * documents upsert
   */
  export type documentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * The filter to search for the documents to update in case it exists.
     * 
    **/
    where: documentsWhereUniqueInput
    /**
     * In case the documents found by the `where` argument doesn't exist, create a new documents with this data.
     * 
    **/
    create: XOR<documentsCreateInput, documentsUncheckedCreateInput>
    /**
     * In case the documents was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<documentsUpdateInput, documentsUncheckedUpdateInput>
  }


  /**
   * documents delete
   */
  export type documentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
    /**
     * Filter which documents to delete.
     * 
    **/
    where: documentsWhereUniqueInput
  }


  /**
   * documents deleteMany
   */
  export type documentsDeleteManyArgs = {
    /**
     * Filter which documents to delete
     * 
    **/
    where?: documentsWhereInput
  }


  /**
   * documents: findUniqueOrThrow
   */
  export type documentsFindUniqueOrThrowArgs = documentsFindUniqueArgsBase
      

  /**
   * documents: findFirstOrThrow
   */
  export type documentsFindFirstOrThrowArgs = documentsFindFirstArgsBase
      

  /**
   * documents without action
   */
  export type documentsArgs = {
    /**
     * Select specific fields to fetch from the documents
     * 
    **/
    select?: documentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: documentsInclude | null
  }



  /**
   * Model notes
   */


  export type AggregateNotes = {
    _count: NotesCountAggregateOutputType | null
    _avg: NotesAvgAggregateOutputType | null
    _sum: NotesSumAggregateOutputType | null
    _min: NotesMinAggregateOutputType | null
    _max: NotesMaxAggregateOutputType | null
  }

  export type NotesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    noteText: string | null
  }

  export type NotesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    noteText: string | null
  }

  export type NotesCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    noteText: number
    _all: number
  }


  export type NotesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotesMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    noteText?: true
  }

  export type NotesMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    noteText?: true
  }

  export type NotesCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    noteText?: true
    _all?: true
  }

  export type NotesAggregateArgs = {
    /**
     * Filter which notes to aggregate.
     * 
    **/
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     * 
    **/
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notes
    **/
    _count?: true | NotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotesMaxAggregateInputType
  }

  export type GetNotesAggregateType<T extends NotesAggregateArgs> = {
        [P in keyof T & keyof AggregateNotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotes[P]>
      : GetScalarType<T[P], AggregateNotes[P]>
  }




  export type NotesGroupByArgs = {
    where?: notesWhereInput
    orderBy?: Enumerable<notesOrderByWithAggregationInput>
    by: Array<NotesScalarFieldEnum>
    having?: notesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotesCountAggregateInputType | true
    _avg?: NotesAvgAggregateInputType
    _sum?: NotesSumAggregateInputType
    _min?: NotesMinAggregateInputType
    _max?: NotesMaxAggregateInputType
  }


  export type NotesGroupByOutputType = {
    id: number
    userId: number
    title: string
    noteText: string
    _count: NotesCountAggregateOutputType | null
    _avg: NotesAvgAggregateOutputType | null
    _sum: NotesSumAggregateOutputType | null
    _min: NotesMinAggregateOutputType | null
    _max: NotesMaxAggregateOutputType | null
  }

  type GetNotesGroupByPayload<T extends NotesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotesGroupByOutputType[P]>
            : GetScalarType<T[P], NotesGroupByOutputType[P]>
        }
      >
    >


  export type notesSelect = {
    id?: boolean
    userId?: boolean
    title?: boolean
    noteText?: boolean
    users?: boolean | usersArgs
  }

  export type notesInclude = {
    users?: boolean | usersArgs
  }

  export type notesGetPayload<
    S extends boolean | null | undefined | notesArgs,
    U = keyof S
      > = S extends true
        ? notes
    : S extends undefined
    ? never
    : S extends notesArgs | notesFindManyArgs
    ?'include' extends U
    ? notes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof notes ? notes[P] : never
  } 
    : notes
  : notes


  type notesCountArgs = Merge<
    Omit<notesFindManyArgs, 'select' | 'include'> & {
      select?: NotesCountAggregateInputType | true
    }
  >

  export interface notesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Notes that matches the filter.
     * @param {notesFindUniqueArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, notesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'notes'> extends True ? CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>> : CheckSelect<T, Prisma__notesClient<notes | null >, Prisma__notesClient<notesGetPayload<T> | null >>

    /**
     * Find the first Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindFirstArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, notesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'notes'> extends True ? CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>> : CheckSelect<T, Prisma__notesClient<notes | null >, Prisma__notesClient<notesGetPayload<T> | null >>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.notes.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.notes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notesWithIdOnly = await prisma.notes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends notesFindManyArgs>(
      args?: SelectSubset<T, notesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<notes>>, PrismaPromise<Array<notesGetPayload<T>>>>

    /**
     * Create a Notes.
     * @param {notesCreateArgs} args - Arguments to create a Notes.
     * @example
     * // Create one Notes
     * const Notes = await prisma.notes.create({
     *   data: {
     *     // ... data to create a Notes
     *   }
     * })
     * 
    **/
    create<T extends notesCreateArgs>(
      args: SelectSubset<T, notesCreateArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Create many Notes.
     *     @param {notesCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const notes = await prisma.notes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notesCreateManyArgs>(
      args?: SelectSubset<T, notesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notes.
     * @param {notesDeleteArgs} args - Arguments to delete one Notes.
     * @example
     * // Delete one Notes
     * const Notes = await prisma.notes.delete({
     *   where: {
     *     // ... filter to delete one Notes
     *   }
     * })
     * 
    **/
    delete<T extends notesDeleteArgs>(
      args: SelectSubset<T, notesDeleteArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Update one Notes.
     * @param {notesUpdateArgs} args - Arguments to update one Notes.
     * @example
     * // Update one Notes
     * const notes = await prisma.notes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notesUpdateArgs>(
      args: SelectSubset<T, notesUpdateArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Delete zero or more Notes.
     * @param {notesDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.notes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notesDeleteManyArgs>(
      args?: SelectSubset<T, notesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const notes = await prisma.notes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notesUpdateManyArgs>(
      args: SelectSubset<T, notesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notes.
     * @param {notesUpsertArgs} args - Arguments to update or create a Notes.
     * @example
     * // Update or create a Notes
     * const notes = await prisma.notes.upsert({
     *   create: {
     *     // ... data to create a Notes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notes we want to update
     *   }
     * })
    **/
    upsert<T extends notesUpsertArgs>(
      args: SelectSubset<T, notesUpsertArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Find one Notes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {notesFindUniqueOrThrowArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, notesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Find the first Notes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindFirstOrThrowArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, notesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__notesClient<notes>, Prisma__notesClient<notesGetPayload<T>>>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.notes.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends notesCountArgs>(
      args?: Subset<T, notesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotesAggregateArgs>(args: Subset<T, NotesAggregateArgs>): PrismaPromise<GetNotesAggregateType<T>>

    /**
     * Group by Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotesGroupByArgs['orderBy'] }
        : { orderBy?: NotesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for notes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * notes base type for findUnique actions
   */
  export type notesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     * 
    **/
    where: notesWhereUniqueInput
  }

  /**
   * notes: findUnique
   */
  export interface notesFindUniqueArgs extends notesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notes base type for findFirst actions
   */
  export type notesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     * 
    **/
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     * 
    **/
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notes.
     * 
    **/
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notes.
     * 
    **/
    distinct?: Enumerable<NotesScalarFieldEnum>
  }

  /**
   * notes: findFirst
   */
  export interface notesFindFirstArgs extends notesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notes findMany
   */
  export type notesFindManyArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     * 
    **/
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     * 
    **/
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notes.
     * 
    **/
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotesScalarFieldEnum>
  }


  /**
   * notes create
   */
  export type notesCreateArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * The data needed to create a notes.
     * 
    **/
    data: XOR<notesCreateInput, notesUncheckedCreateInput>
  }


  /**
   * notes createMany
   */
  export type notesCreateManyArgs = {
    /**
     * The data used to create many notes.
     * 
    **/
    data: Enumerable<notesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * notes update
   */
  export type notesUpdateArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * The data needed to update a notes.
     * 
    **/
    data: XOR<notesUpdateInput, notesUncheckedUpdateInput>
    /**
     * Choose, which notes to update.
     * 
    **/
    where: notesWhereUniqueInput
  }


  /**
   * notes updateMany
   */
  export type notesUpdateManyArgs = {
    /**
     * The data used to update notes.
     * 
    **/
    data: XOR<notesUpdateManyMutationInput, notesUncheckedUpdateManyInput>
    /**
     * Filter which notes to update
     * 
    **/
    where?: notesWhereInput
  }


  /**
   * notes upsert
   */
  export type notesUpsertArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * The filter to search for the notes to update in case it exists.
     * 
    **/
    where: notesWhereUniqueInput
    /**
     * In case the notes found by the `where` argument doesn't exist, create a new notes with this data.
     * 
    **/
    create: XOR<notesCreateInput, notesUncheckedCreateInput>
    /**
     * In case the notes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<notesUpdateInput, notesUncheckedUpdateInput>
  }


  /**
   * notes delete
   */
  export type notesDeleteArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
    /**
     * Filter which notes to delete.
     * 
    **/
    where: notesWhereUniqueInput
  }


  /**
   * notes deleteMany
   */
  export type notesDeleteManyArgs = {
    /**
     * Filter which notes to delete
     * 
    **/
    where?: notesWhereInput
  }


  /**
   * notes: findUniqueOrThrow
   */
  export type notesFindUniqueOrThrowArgs = notesFindUniqueArgsBase
      

  /**
   * notes: findFirstOrThrow
   */
  export type notesFindFirstOrThrowArgs = notesFindFirstArgsBase
      

  /**
   * notes without action
   */
  export type notesArgs = {
    /**
     * Select specific fields to fetch from the notes
     * 
    **/
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notesInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    cards?: boolean | cardsFindManyArgs
    credentials?: boolean | credentialsFindManyArgs
    documents?: boolean | documentsFindManyArgs
    notes?: boolean | notesFindManyArgs
    wifi?: boolean | wifiFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    cards?: boolean | cardsFindManyArgs
    credentials?: boolean | credentialsFindManyArgs
    documents?: boolean | documentsFindManyArgs
    notes?: boolean | notesFindManyArgs
    wifi?: boolean | wifiFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cards' ? Array < cardsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'credentials' ? Array < credentialsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'documents' ? Array < documentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'notes' ? Array < notesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'wifi' ? Array < wifiGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cards' ? Array < cardsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'credentials' ? Array < credentialsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'documents' ? Array < documentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'notes' ? Array < notesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'wifi' ? Array < wifiGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cards<T extends cardsFindManyArgs = {}>(args?: Subset<T, cardsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<cards>>, PrismaPromise<Array<cardsGetPayload<T>>>>;

    credentials<T extends credentialsFindManyArgs = {}>(args?: Subset<T, credentialsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<credentials>>, PrismaPromise<Array<credentialsGetPayload<T>>>>;

    documents<T extends documentsFindManyArgs = {}>(args?: Subset<T, documentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<documents>>, PrismaPromise<Array<documentsGetPayload<T>>>>;

    notes<T extends notesFindManyArgs = {}>(args?: Subset<T, notesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<notes>>, PrismaPromise<Array<notesGetPayload<T>>>>;

    wifi<T extends wifiFindManyArgs = {}>(args?: Subset<T, wifiFindManyArgs>): CheckSelect<T, PrismaPromise<Array<wifi>>, PrismaPromise<Array<wifiGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model wifi
   */


  export type AggregateWifi = {
    _count: WifiCountAggregateOutputType | null
    _avg: WifiAvgAggregateOutputType | null
    _sum: WifiSumAggregateOutputType | null
    _min: WifiMinAggregateOutputType | null
    _max: WifiMaxAggregateOutputType | null
  }

  export type WifiAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type WifiSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type WifiMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    password: string | null
  }

  export type WifiMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    password: string | null
  }

  export type WifiCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    password: number
    _all: number
  }


  export type WifiAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type WifiSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type WifiMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    password?: true
  }

  export type WifiMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    password?: true
  }

  export type WifiCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    password?: true
    _all?: true
  }

  export type WifiAggregateArgs = {
    /**
     * Filter which wifi to aggregate.
     * 
    **/
    where?: wifiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wifis to fetch.
     * 
    **/
    orderBy?: Enumerable<wifiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: wifiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wifis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wifis.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wifis
    **/
    _count?: true | WifiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WifiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WifiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WifiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WifiMaxAggregateInputType
  }

  export type GetWifiAggregateType<T extends WifiAggregateArgs> = {
        [P in keyof T & keyof AggregateWifi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWifi[P]>
      : GetScalarType<T[P], AggregateWifi[P]>
  }




  export type WifiGroupByArgs = {
    where?: wifiWhereInput
    orderBy?: Enumerable<wifiOrderByWithAggregationInput>
    by: Array<WifiScalarFieldEnum>
    having?: wifiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WifiCountAggregateInputType | true
    _avg?: WifiAvgAggregateInputType
    _sum?: WifiSumAggregateInputType
    _min?: WifiMinAggregateInputType
    _max?: WifiMaxAggregateInputType
  }


  export type WifiGroupByOutputType = {
    id: number
    userId: number
    name: string
    password: string
    _count: WifiCountAggregateOutputType | null
    _avg: WifiAvgAggregateOutputType | null
    _sum: WifiSumAggregateOutputType | null
    _min: WifiMinAggregateOutputType | null
    _max: WifiMaxAggregateOutputType | null
  }

  type GetWifiGroupByPayload<T extends WifiGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WifiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WifiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WifiGroupByOutputType[P]>
            : GetScalarType<T[P], WifiGroupByOutputType[P]>
        }
      >
    >


  export type wifiSelect = {
    id?: boolean
    userId?: boolean
    name?: boolean
    password?: boolean
    users?: boolean | usersArgs
  }

  export type wifiInclude = {
    users?: boolean | usersArgs
  }

  export type wifiGetPayload<
    S extends boolean | null | undefined | wifiArgs,
    U = keyof S
      > = S extends true
        ? wifi
    : S extends undefined
    ? never
    : S extends wifiArgs | wifiFindManyArgs
    ?'include' extends U
    ? wifi  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof wifi ? wifi[P] : never
  } 
    : wifi
  : wifi


  type wifiCountArgs = Merge<
    Omit<wifiFindManyArgs, 'select' | 'include'> & {
      select?: WifiCountAggregateInputType | true
    }
  >

  export interface wifiDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Wifi that matches the filter.
     * @param {wifiFindUniqueArgs} args - Arguments to find a Wifi
     * @example
     * // Get one Wifi
     * const wifi = await prisma.wifi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends wifiFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, wifiFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'wifi'> extends True ? CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>> : CheckSelect<T, Prisma__wifiClient<wifi | null >, Prisma__wifiClient<wifiGetPayload<T> | null >>

    /**
     * Find the first Wifi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wifiFindFirstArgs} args - Arguments to find a Wifi
     * @example
     * // Get one Wifi
     * const wifi = await prisma.wifi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends wifiFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, wifiFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'wifi'> extends True ? CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>> : CheckSelect<T, Prisma__wifiClient<wifi | null >, Prisma__wifiClient<wifiGetPayload<T> | null >>

    /**
     * Find zero or more Wifis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wifiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wifis
     * const wifis = await prisma.wifi.findMany()
     * 
     * // Get first 10 Wifis
     * const wifis = await prisma.wifi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wifiWithIdOnly = await prisma.wifi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends wifiFindManyArgs>(
      args?: SelectSubset<T, wifiFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<wifi>>, PrismaPromise<Array<wifiGetPayload<T>>>>

    /**
     * Create a Wifi.
     * @param {wifiCreateArgs} args - Arguments to create a Wifi.
     * @example
     * // Create one Wifi
     * const Wifi = await prisma.wifi.create({
     *   data: {
     *     // ... data to create a Wifi
     *   }
     * })
     * 
    **/
    create<T extends wifiCreateArgs>(
      args: SelectSubset<T, wifiCreateArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Create many Wifis.
     *     @param {wifiCreateManyArgs} args - Arguments to create many Wifis.
     *     @example
     *     // Create many Wifis
     *     const wifi = await prisma.wifi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends wifiCreateManyArgs>(
      args?: SelectSubset<T, wifiCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Wifi.
     * @param {wifiDeleteArgs} args - Arguments to delete one Wifi.
     * @example
     * // Delete one Wifi
     * const Wifi = await prisma.wifi.delete({
     *   where: {
     *     // ... filter to delete one Wifi
     *   }
     * })
     * 
    **/
    delete<T extends wifiDeleteArgs>(
      args: SelectSubset<T, wifiDeleteArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Update one Wifi.
     * @param {wifiUpdateArgs} args - Arguments to update one Wifi.
     * @example
     * // Update one Wifi
     * const wifi = await prisma.wifi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends wifiUpdateArgs>(
      args: SelectSubset<T, wifiUpdateArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Delete zero or more Wifis.
     * @param {wifiDeleteManyArgs} args - Arguments to filter Wifis to delete.
     * @example
     * // Delete a few Wifis
     * const { count } = await prisma.wifi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends wifiDeleteManyArgs>(
      args?: SelectSubset<T, wifiDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wifis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wifiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wifis
     * const wifi = await prisma.wifi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends wifiUpdateManyArgs>(
      args: SelectSubset<T, wifiUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Wifi.
     * @param {wifiUpsertArgs} args - Arguments to update or create a Wifi.
     * @example
     * // Update or create a Wifi
     * const wifi = await prisma.wifi.upsert({
     *   create: {
     *     // ... data to create a Wifi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wifi we want to update
     *   }
     * })
    **/
    upsert<T extends wifiUpsertArgs>(
      args: SelectSubset<T, wifiUpsertArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Find one Wifi that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {wifiFindUniqueOrThrowArgs} args - Arguments to find a Wifi
     * @example
     * // Get one Wifi
     * const wifi = await prisma.wifi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends wifiFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, wifiFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Find the first Wifi that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wifiFindFirstOrThrowArgs} args - Arguments to find a Wifi
     * @example
     * // Get one Wifi
     * const wifi = await prisma.wifi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends wifiFindFirstOrThrowArgs>(
      args?: SelectSubset<T, wifiFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__wifiClient<wifi>, Prisma__wifiClient<wifiGetPayload<T>>>

    /**
     * Count the number of Wifis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wifiCountArgs} args - Arguments to filter Wifis to count.
     * @example
     * // Count the number of Wifis
     * const count = await prisma.wifi.count({
     *   where: {
     *     // ... the filter for the Wifis we want to count
     *   }
     * })
    **/
    count<T extends wifiCountArgs>(
      args?: Subset<T, wifiCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WifiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wifi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WifiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WifiAggregateArgs>(args: Subset<T, WifiAggregateArgs>): PrismaPromise<GetWifiAggregateType<T>>

    /**
     * Group by Wifi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WifiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WifiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WifiGroupByArgs['orderBy'] }
        : { orderBy?: WifiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WifiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWifiGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for wifi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__wifiClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * wifi base type for findUnique actions
   */
  export type wifiFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * Filter, which wifi to fetch.
     * 
    **/
    where: wifiWhereUniqueInput
  }

  /**
   * wifi: findUnique
   */
  export interface wifiFindUniqueArgs extends wifiFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * wifi base type for findFirst actions
   */
  export type wifiFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * Filter, which wifi to fetch.
     * 
    **/
    where?: wifiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wifis to fetch.
     * 
    **/
    orderBy?: Enumerable<wifiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wifis.
     * 
    **/
    cursor?: wifiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wifis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wifis.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wifis.
     * 
    **/
    distinct?: Enumerable<WifiScalarFieldEnum>
  }

  /**
   * wifi: findFirst
   */
  export interface wifiFindFirstArgs extends wifiFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * wifi findMany
   */
  export type wifiFindManyArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * Filter, which wifis to fetch.
     * 
    **/
    where?: wifiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wifis to fetch.
     * 
    **/
    orderBy?: Enumerable<wifiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wifis.
     * 
    **/
    cursor?: wifiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wifis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wifis.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WifiScalarFieldEnum>
  }


  /**
   * wifi create
   */
  export type wifiCreateArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * The data needed to create a wifi.
     * 
    **/
    data: XOR<wifiCreateInput, wifiUncheckedCreateInput>
  }


  /**
   * wifi createMany
   */
  export type wifiCreateManyArgs = {
    /**
     * The data used to create many wifis.
     * 
    **/
    data: Enumerable<wifiCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * wifi update
   */
  export type wifiUpdateArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * The data needed to update a wifi.
     * 
    **/
    data: XOR<wifiUpdateInput, wifiUncheckedUpdateInput>
    /**
     * Choose, which wifi to update.
     * 
    **/
    where: wifiWhereUniqueInput
  }


  /**
   * wifi updateMany
   */
  export type wifiUpdateManyArgs = {
    /**
     * The data used to update wifis.
     * 
    **/
    data: XOR<wifiUpdateManyMutationInput, wifiUncheckedUpdateManyInput>
    /**
     * Filter which wifis to update
     * 
    **/
    where?: wifiWhereInput
  }


  /**
   * wifi upsert
   */
  export type wifiUpsertArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * The filter to search for the wifi to update in case it exists.
     * 
    **/
    where: wifiWhereUniqueInput
    /**
     * In case the wifi found by the `where` argument doesn't exist, create a new wifi with this data.
     * 
    **/
    create: XOR<wifiCreateInput, wifiUncheckedCreateInput>
    /**
     * In case the wifi was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<wifiUpdateInput, wifiUncheckedUpdateInput>
  }


  /**
   * wifi delete
   */
  export type wifiDeleteArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
    /**
     * Filter which wifi to delete.
     * 
    **/
    where: wifiWhereUniqueInput
  }


  /**
   * wifi deleteMany
   */
  export type wifiDeleteManyArgs = {
    /**
     * Filter which wifis to delete
     * 
    **/
    where?: wifiWhereInput
  }


  /**
   * wifi: findUniqueOrThrow
   */
  export type wifiFindUniqueOrThrowArgs = wifiFindUniqueArgsBase
      

  /**
   * wifi: findFirstOrThrow
   */
  export type wifiFindFirstOrThrowArgs = wifiFindFirstArgsBase
      

  /**
   * wifi without action
   */
  export type wifiArgs = {
    /**
     * Select specific fields to fetch from the wifi
     * 
    **/
    select?: wifiSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: wifiInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CardsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    number: 'number',
    name: 'name',
    cvc: 'cvc',
    date: 'date',
    password: 'password',
    isVirtual: 'isVirtual',
    type: 'type'
  };

  export type CardsScalarFieldEnum = (typeof CardsScalarFieldEnum)[keyof typeof CardsScalarFieldEnum]


  export const CredentialsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    url: 'url',
    userName: 'userName',
    password: 'password'
  };

  export type CredentialsScalarFieldEnum = (typeof CredentialsScalarFieldEnum)[keyof typeof CredentialsScalarFieldEnum]


  export const DocumentsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    fullName: 'fullName',
    issueDate: 'issueDate',
    expirationDate: 'expirationDate',
    number: 'number',
    issueInstitution: 'issueInstitution'
  };

  export type DocumentsScalarFieldEnum = (typeof DocumentsScalarFieldEnum)[keyof typeof DocumentsScalarFieldEnum]


  export const NotesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    noteText: 'noteText'
  };

  export type NotesScalarFieldEnum = (typeof NotesScalarFieldEnum)[keyof typeof NotesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const WifiScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    password: 'password'
  };

  export type WifiScalarFieldEnum = (typeof WifiScalarFieldEnum)[keyof typeof WifiScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type cardsWhereInput = {
    AND?: Enumerable<cardsWhereInput>
    OR?: Enumerable<cardsWhereInput>
    NOT?: Enumerable<cardsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    number?: BigIntFilter | bigint | number
    name?: StringFilter | string
    cvc?: IntFilter | number
    date?: DateTimeFilter | Date | string
    password?: StringFilter | string
    isVirtual?: BoolFilter | boolean
    type?: EnumcardTypeNullableFilter | cardType | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type cardsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    number?: SortOrder
    name?: SortOrder
    cvc?: SortOrder
    date?: SortOrder
    password?: SortOrder
    isVirtual?: SortOrder
    type?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type cardsWhereUniqueInput = {
    id?: number
    userId_title?: cardsUserIdTitleCompoundUniqueInput
  }

  export type cardsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    number?: SortOrder
    name?: SortOrder
    cvc?: SortOrder
    date?: SortOrder
    password?: SortOrder
    isVirtual?: SortOrder
    type?: SortOrder
    _count?: cardsCountOrderByAggregateInput
    _avg?: cardsAvgOrderByAggregateInput
    _max?: cardsMaxOrderByAggregateInput
    _min?: cardsMinOrderByAggregateInput
    _sum?: cardsSumOrderByAggregateInput
  }

  export type cardsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cardsScalarWhereWithAggregatesInput>
    OR?: Enumerable<cardsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cardsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    number?: BigIntWithAggregatesFilter | bigint | number
    name?: StringWithAggregatesFilter | string
    cvc?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    password?: StringWithAggregatesFilter | string
    isVirtual?: BoolWithAggregatesFilter | boolean
    type?: EnumcardTypeNullableWithAggregatesFilter | cardType | null
  }

  export type credentialsWhereInput = {
    AND?: Enumerable<credentialsWhereInput>
    OR?: Enumerable<credentialsWhereInput>
    NOT?: Enumerable<credentialsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    url?: StringFilter | string
    userName?: StringFilter | string
    password?: StringFilter | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type credentialsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type credentialsWhereUniqueInput = {
    id?: number
    userId_title?: credentialsUserIdTitleCompoundUniqueInput
  }

  export type credentialsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    _count?: credentialsCountOrderByAggregateInput
    _avg?: credentialsAvgOrderByAggregateInput
    _max?: credentialsMaxOrderByAggregateInput
    _min?: credentialsMinOrderByAggregateInput
    _sum?: credentialsSumOrderByAggregateInput
  }

  export type credentialsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<credentialsScalarWhereWithAggregatesInput>
    OR?: Enumerable<credentialsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<credentialsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    userName?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type documentsWhereInput = {
    AND?: Enumerable<documentsWhereInput>
    OR?: Enumerable<documentsWhereInput>
    NOT?: Enumerable<documentsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    type?: EnumdocTypeNullableFilter | docType | null
    fullName?: StringFilter | string
    issueDate?: DateTimeFilter | Date | string
    expirationDate?: DateTimeFilter | Date | string
    number?: BigIntFilter | bigint | number
    issueInstitution?: StringFilter | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type documentsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    issueDate?: SortOrder
    expirationDate?: SortOrder
    number?: SortOrder
    issueInstitution?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type documentsWhereUniqueInput = {
    id?: number
    number?: bigint | number
  }

  export type documentsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    issueDate?: SortOrder
    expirationDate?: SortOrder
    number?: SortOrder
    issueInstitution?: SortOrder
    _count?: documentsCountOrderByAggregateInput
    _avg?: documentsAvgOrderByAggregateInput
    _max?: documentsMaxOrderByAggregateInput
    _min?: documentsMinOrderByAggregateInput
    _sum?: documentsSumOrderByAggregateInput
  }

  export type documentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<documentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<documentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<documentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    type?: EnumdocTypeNullableWithAggregatesFilter | docType | null
    fullName?: StringWithAggregatesFilter | string
    issueDate?: DateTimeWithAggregatesFilter | Date | string
    expirationDate?: DateTimeWithAggregatesFilter | Date | string
    number?: BigIntWithAggregatesFilter | bigint | number
    issueInstitution?: StringWithAggregatesFilter | string
  }

  export type notesWhereInput = {
    AND?: Enumerable<notesWhereInput>
    OR?: Enumerable<notesWhereInput>
    NOT?: Enumerable<notesWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    noteText?: StringFilter | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type notesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    noteText?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type notesWhereUniqueInput = {
    id?: number
    userId_title?: notesUserIdTitleCompoundUniqueInput
  }

  export type notesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    noteText?: SortOrder
    _count?: notesCountOrderByAggregateInput
    _avg?: notesAvgOrderByAggregateInput
    _max?: notesMaxOrderByAggregateInput
    _min?: notesMinOrderByAggregateInput
    _sum?: notesSumOrderByAggregateInput
  }

  export type notesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<notesScalarWhereWithAggregatesInput>
    OR?: Enumerable<notesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<notesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    noteText?: StringWithAggregatesFilter | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    cards?: CardsListRelationFilter
    credentials?: CredentialsListRelationFilter
    documents?: DocumentsListRelationFilter
    notes?: NotesListRelationFilter
    wifi?: WifiListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cards?: cardsOrderByRelationAggregateInput
    credentials?: credentialsOrderByRelationAggregateInput
    documents?: documentsOrderByRelationAggregateInput
    notes?: notesOrderByRelationAggregateInput
    wifi?: wifiOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type wifiWhereInput = {
    AND?: Enumerable<wifiWhereInput>
    OR?: Enumerable<wifiWhereInput>
    NOT?: Enumerable<wifiWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    password?: StringFilter | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type wifiOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    password?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type wifiWhereUniqueInput = {
    id?: number
  }

  export type wifiOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    password?: SortOrder
    _count?: wifiCountOrderByAggregateInput
    _avg?: wifiAvgOrderByAggregateInput
    _max?: wifiMaxOrderByAggregateInput
    _min?: wifiMinOrderByAggregateInput
    _sum?: wifiSumOrderByAggregateInput
  }

  export type wifiScalarWhereWithAggregatesInput = {
    AND?: Enumerable<wifiScalarWhereWithAggregatesInput>
    OR?: Enumerable<wifiScalarWhereWithAggregatesInput>
    NOT?: Enumerable<wifiScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type cardsCreateInput = {
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
    users: usersCreateNestedOneWithoutCardsInput
  }

  export type cardsUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
  }

  export type cardsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
    users?: usersUpdateOneRequiredWithoutCardsNestedInput
  }

  export type cardsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type cardsCreateManyInput = {
    id?: number
    userId: number
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
  }

  export type cardsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type cardsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type credentialsCreateInput = {
    title: string
    url: string
    userName: string
    password: string
    users: usersCreateNestedOneWithoutCredentialsInput
  }

  export type credentialsUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    url: string
    userName: string
    password: string
  }

  export type credentialsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutCredentialsNestedInput
  }

  export type credentialsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type credentialsCreateManyInput = {
    id?: number
    userId: number
    title: string
    url: string
    userName: string
    password: string
  }

  export type credentialsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type credentialsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type documentsCreateInput = {
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
    users: usersCreateNestedOneWithoutDocumentsInput
  }

  export type documentsUncheckedCreateInput = {
    id?: number
    userId: number
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
  }

  export type documentsUpdateInput = {
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type documentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type documentsCreateManyInput = {
    id?: number
    userId: number
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
  }

  export type documentsUpdateManyMutationInput = {
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type documentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type notesCreateInput = {
    title: string
    noteText: string
    users: usersCreateNestedOneWithoutNotesInput
  }

  export type notesUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    noteText: string
  }

  export type notesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutNotesNestedInput
  }

  export type notesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type notesCreateManyInput = {
    id?: number
    userId: number
    title: string
    noteText: string
  }

  export type notesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type notesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    email: string
    password: string
    cards?: cardsCreateNestedManyWithoutUsersInput
    credentials?: credentialsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    notes?: notesCreateNestedManyWithoutUsersInput
    wifi?: wifiCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    cards?: cardsUncheckedCreateNestedManyWithoutUsersInput
    credentials?: credentialsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    notes?: notesUncheckedCreateNestedManyWithoutUsersInput
    wifi?: wifiUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    notes?: notesUpdateManyWithoutUsersNestedInput
    wifi?: wifiUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUncheckedUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    notes?: notesUncheckedUpdateManyWithoutUsersNestedInput
    wifi?: wifiUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type wifiCreateInput = {
    name: string
    password: string
    users: usersCreateNestedOneWithoutWifiInput
  }

  export type wifiUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    password: string
  }

  export type wifiUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutWifiNestedInput
  }

  export type wifiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type wifiCreateManyInput = {
    id?: number
    userId: number
    name: string
    password: string
  }

  export type wifiUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type wifiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumcardTypeNullableFilter = {
    equals?: cardType | null
    in?: Enumerable<cardType> | null
    notIn?: Enumerable<cardType> | null
    not?: NestedEnumcardTypeNullableFilter | cardType | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type cardsUserIdTitleCompoundUniqueInput = {
    userId: number
    title: string
  }

  export type cardsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    number?: SortOrder
    name?: SortOrder
    cvc?: SortOrder
    date?: SortOrder
    password?: SortOrder
    isVirtual?: SortOrder
    type?: SortOrder
  }

  export type cardsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    cvc?: SortOrder
  }

  export type cardsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    number?: SortOrder
    name?: SortOrder
    cvc?: SortOrder
    date?: SortOrder
    password?: SortOrder
    isVirtual?: SortOrder
    type?: SortOrder
  }

  export type cardsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    number?: SortOrder
    name?: SortOrder
    cvc?: SortOrder
    date?: SortOrder
    password?: SortOrder
    isVirtual?: SortOrder
    type?: SortOrder
  }

  export type cardsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    cvc?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumcardTypeNullableWithAggregatesFilter = {
    equals?: cardType | null
    in?: Enumerable<cardType> | null
    notIn?: Enumerable<cardType> | null
    not?: NestedEnumcardTypeNullableWithAggregatesFilter | cardType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumcardTypeNullableFilter
    _max?: NestedEnumcardTypeNullableFilter
  }

  export type credentialsUserIdTitleCompoundUniqueInput = {
    userId: number
    title: string
  }

  export type credentialsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    userName?: SortOrder
    password?: SortOrder
  }

  export type credentialsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type credentialsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    userName?: SortOrder
    password?: SortOrder
  }

  export type credentialsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    userName?: SortOrder
    password?: SortOrder
  }

  export type credentialsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumdocTypeNullableFilter = {
    equals?: docType | null
    in?: Enumerable<docType> | null
    notIn?: Enumerable<docType> | null
    not?: NestedEnumdocTypeNullableFilter | docType | null
  }

  export type documentsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    issueDate?: SortOrder
    expirationDate?: SortOrder
    number?: SortOrder
    issueInstitution?: SortOrder
  }

  export type documentsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
  }

  export type documentsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    issueDate?: SortOrder
    expirationDate?: SortOrder
    number?: SortOrder
    issueInstitution?: SortOrder
  }

  export type documentsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    issueDate?: SortOrder
    expirationDate?: SortOrder
    number?: SortOrder
    issueInstitution?: SortOrder
  }

  export type documentsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
  }

  export type EnumdocTypeNullableWithAggregatesFilter = {
    equals?: docType | null
    in?: Enumerable<docType> | null
    notIn?: Enumerable<docType> | null
    not?: NestedEnumdocTypeNullableWithAggregatesFilter | docType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumdocTypeNullableFilter
    _max?: NestedEnumdocTypeNullableFilter
  }

  export type notesUserIdTitleCompoundUniqueInput = {
    userId: number
    title: string
  }

  export type notesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    noteText?: SortOrder
  }

  export type notesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type notesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    noteText?: SortOrder
  }

  export type notesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    noteText?: SortOrder
  }

  export type notesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CardsListRelationFilter = {
    every?: cardsWhereInput
    some?: cardsWhereInput
    none?: cardsWhereInput
  }

  export type CredentialsListRelationFilter = {
    every?: credentialsWhereInput
    some?: credentialsWhereInput
    none?: credentialsWhereInput
  }

  export type DocumentsListRelationFilter = {
    every?: documentsWhereInput
    some?: documentsWhereInput
    none?: documentsWhereInput
  }

  export type NotesListRelationFilter = {
    every?: notesWhereInput
    some?: notesWhereInput
    none?: notesWhereInput
  }

  export type WifiListRelationFilter = {
    every?: wifiWhereInput
    some?: wifiWhereInput
    none?: wifiWhereInput
  }

  export type cardsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type credentialsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type documentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type wifiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type wifiCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type wifiAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type wifiMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type wifiMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type wifiSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type usersCreateNestedOneWithoutCardsInput = {
    create?: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCardsInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumcardTypeFieldUpdateOperationsInput = {
    set?: cardType | null
  }

  export type usersUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCardsInput
    upsert?: usersUpsertWithoutCardsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCardsInput, usersUncheckedUpdateWithoutCardsInput>
  }

  export type usersCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<usersCreateWithoutCredentialsInput, usersUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCredentialsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutCredentialsNestedInput = {
    create?: XOR<usersCreateWithoutCredentialsInput, usersUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCredentialsInput
    upsert?: usersUpsertWithoutCredentialsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCredentialsInput, usersUncheckedUpdateWithoutCredentialsInput>
  }

  export type usersCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDocumentsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableEnumdocTypeFieldUpdateOperationsInput = {
    set?: docType | null
  }

  export type usersUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDocumentsInput
    upsert?: usersUpsertWithoutDocumentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutDocumentsInput, usersUncheckedUpdateWithoutDocumentsInput>
  }

  export type usersCreateNestedOneWithoutNotesInput = {
    create?: XOR<usersCreateWithoutNotesInput, usersUncheckedCreateWithoutNotesInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotesInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<usersCreateWithoutNotesInput, usersUncheckedCreateWithoutNotesInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotesInput
    upsert?: usersUpsertWithoutNotesInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutNotesInput, usersUncheckedUpdateWithoutNotesInput>
  }

  export type cardsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cardsCreateWithoutUsersInput>, Enumerable<cardsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cardsCreateOrConnectWithoutUsersInput>
    createMany?: cardsCreateManyUsersInputEnvelope
    connect?: Enumerable<cardsWhereUniqueInput>
  }

  export type credentialsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<credentialsCreateWithoutUsersInput>, Enumerable<credentialsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<credentialsCreateOrConnectWithoutUsersInput>
    createMany?: credentialsCreateManyUsersInputEnvelope
    connect?: Enumerable<credentialsWhereUniqueInput>
  }

  export type documentsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<documentsCreateWithoutUsersInput>, Enumerable<documentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<documentsCreateOrConnectWithoutUsersInput>
    createMany?: documentsCreateManyUsersInputEnvelope
    connect?: Enumerable<documentsWhereUniqueInput>
  }

  export type notesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<notesCreateWithoutUsersInput>, Enumerable<notesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutUsersInput>
    createMany?: notesCreateManyUsersInputEnvelope
    connect?: Enumerable<notesWhereUniqueInput>
  }

  export type wifiCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<wifiCreateWithoutUsersInput>, Enumerable<wifiUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<wifiCreateOrConnectWithoutUsersInput>
    createMany?: wifiCreateManyUsersInputEnvelope
    connect?: Enumerable<wifiWhereUniqueInput>
  }

  export type cardsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cardsCreateWithoutUsersInput>, Enumerable<cardsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cardsCreateOrConnectWithoutUsersInput>
    createMany?: cardsCreateManyUsersInputEnvelope
    connect?: Enumerable<cardsWhereUniqueInput>
  }

  export type credentialsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<credentialsCreateWithoutUsersInput>, Enumerable<credentialsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<credentialsCreateOrConnectWithoutUsersInput>
    createMany?: credentialsCreateManyUsersInputEnvelope
    connect?: Enumerable<credentialsWhereUniqueInput>
  }

  export type documentsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<documentsCreateWithoutUsersInput>, Enumerable<documentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<documentsCreateOrConnectWithoutUsersInput>
    createMany?: documentsCreateManyUsersInputEnvelope
    connect?: Enumerable<documentsWhereUniqueInput>
  }

  export type notesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<notesCreateWithoutUsersInput>, Enumerable<notesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutUsersInput>
    createMany?: notesCreateManyUsersInputEnvelope
    connect?: Enumerable<notesWhereUniqueInput>
  }

  export type wifiUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<wifiCreateWithoutUsersInput>, Enumerable<wifiUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<wifiCreateOrConnectWithoutUsersInput>
    createMany?: wifiCreateManyUsersInputEnvelope
    connect?: Enumerable<wifiWhereUniqueInput>
  }

  export type cardsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cardsCreateWithoutUsersInput>, Enumerable<cardsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cardsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cardsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cardsCreateManyUsersInputEnvelope
    set?: Enumerable<cardsWhereUniqueInput>
    disconnect?: Enumerable<cardsWhereUniqueInput>
    delete?: Enumerable<cardsWhereUniqueInput>
    connect?: Enumerable<cardsWhereUniqueInput>
    update?: Enumerable<cardsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cardsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cardsScalarWhereInput>
  }

  export type credentialsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<credentialsCreateWithoutUsersInput>, Enumerable<credentialsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<credentialsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<credentialsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: credentialsCreateManyUsersInputEnvelope
    set?: Enumerable<credentialsWhereUniqueInput>
    disconnect?: Enumerable<credentialsWhereUniqueInput>
    delete?: Enumerable<credentialsWhereUniqueInput>
    connect?: Enumerable<credentialsWhereUniqueInput>
    update?: Enumerable<credentialsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<credentialsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<credentialsScalarWhereInput>
  }

  export type documentsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<documentsCreateWithoutUsersInput>, Enumerable<documentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<documentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<documentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: documentsCreateManyUsersInputEnvelope
    set?: Enumerable<documentsWhereUniqueInput>
    disconnect?: Enumerable<documentsWhereUniqueInput>
    delete?: Enumerable<documentsWhereUniqueInput>
    connect?: Enumerable<documentsWhereUniqueInput>
    update?: Enumerable<documentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<documentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<documentsScalarWhereInput>
  }

  export type notesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<notesCreateWithoutUsersInput>, Enumerable<notesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<notesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: notesCreateManyUsersInputEnvelope
    set?: Enumerable<notesWhereUniqueInput>
    disconnect?: Enumerable<notesWhereUniqueInput>
    delete?: Enumerable<notesWhereUniqueInput>
    connect?: Enumerable<notesWhereUniqueInput>
    update?: Enumerable<notesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<notesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<notesScalarWhereInput>
  }

  export type wifiUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<wifiCreateWithoutUsersInput>, Enumerable<wifiUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<wifiCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<wifiUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: wifiCreateManyUsersInputEnvelope
    set?: Enumerable<wifiWhereUniqueInput>
    disconnect?: Enumerable<wifiWhereUniqueInput>
    delete?: Enumerable<wifiWhereUniqueInput>
    connect?: Enumerable<wifiWhereUniqueInput>
    update?: Enumerable<wifiUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<wifiUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<wifiScalarWhereInput>
  }

  export type cardsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cardsCreateWithoutUsersInput>, Enumerable<cardsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cardsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cardsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cardsCreateManyUsersInputEnvelope
    set?: Enumerable<cardsWhereUniqueInput>
    disconnect?: Enumerable<cardsWhereUniqueInput>
    delete?: Enumerable<cardsWhereUniqueInput>
    connect?: Enumerable<cardsWhereUniqueInput>
    update?: Enumerable<cardsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cardsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cardsScalarWhereInput>
  }

  export type credentialsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<credentialsCreateWithoutUsersInput>, Enumerable<credentialsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<credentialsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<credentialsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: credentialsCreateManyUsersInputEnvelope
    set?: Enumerable<credentialsWhereUniqueInput>
    disconnect?: Enumerable<credentialsWhereUniqueInput>
    delete?: Enumerable<credentialsWhereUniqueInput>
    connect?: Enumerable<credentialsWhereUniqueInput>
    update?: Enumerable<credentialsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<credentialsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<credentialsScalarWhereInput>
  }

  export type documentsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<documentsCreateWithoutUsersInput>, Enumerable<documentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<documentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<documentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: documentsCreateManyUsersInputEnvelope
    set?: Enumerable<documentsWhereUniqueInput>
    disconnect?: Enumerable<documentsWhereUniqueInput>
    delete?: Enumerable<documentsWhereUniqueInput>
    connect?: Enumerable<documentsWhereUniqueInput>
    update?: Enumerable<documentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<documentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<documentsScalarWhereInput>
  }

  export type notesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<notesCreateWithoutUsersInput>, Enumerable<notesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<notesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: notesCreateManyUsersInputEnvelope
    set?: Enumerable<notesWhereUniqueInput>
    disconnect?: Enumerable<notesWhereUniqueInput>
    delete?: Enumerable<notesWhereUniqueInput>
    connect?: Enumerable<notesWhereUniqueInput>
    update?: Enumerable<notesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<notesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<notesScalarWhereInput>
  }

  export type wifiUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<wifiCreateWithoutUsersInput>, Enumerable<wifiUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<wifiCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<wifiUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: wifiCreateManyUsersInputEnvelope
    set?: Enumerable<wifiWhereUniqueInput>
    disconnect?: Enumerable<wifiWhereUniqueInput>
    delete?: Enumerable<wifiWhereUniqueInput>
    connect?: Enumerable<wifiWhereUniqueInput>
    update?: Enumerable<wifiUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<wifiUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<wifiScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutWifiInput = {
    create?: XOR<usersCreateWithoutWifiInput, usersUncheckedCreateWithoutWifiInput>
    connectOrCreate?: usersCreateOrConnectWithoutWifiInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutWifiNestedInput = {
    create?: XOR<usersCreateWithoutWifiInput, usersUncheckedCreateWithoutWifiInput>
    connectOrCreate?: usersCreateOrConnectWithoutWifiInput
    upsert?: usersUpsertWithoutWifiInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutWifiInput, usersUncheckedUpdateWithoutWifiInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumcardTypeNullableFilter = {
    equals?: cardType | null
    in?: Enumerable<cardType> | null
    notIn?: Enumerable<cardType> | null
    not?: NestedEnumcardTypeNullableFilter | cardType | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumcardTypeNullableWithAggregatesFilter = {
    equals?: cardType | null
    in?: Enumerable<cardType> | null
    notIn?: Enumerable<cardType> | null
    not?: NestedEnumcardTypeNullableWithAggregatesFilter | cardType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumcardTypeNullableFilter
    _max?: NestedEnumcardTypeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumdocTypeNullableFilter = {
    equals?: docType | null
    in?: Enumerable<docType> | null
    notIn?: Enumerable<docType> | null
    not?: NestedEnumdocTypeNullableFilter | docType | null
  }

  export type NestedEnumdocTypeNullableWithAggregatesFilter = {
    equals?: docType | null
    in?: Enumerable<docType> | null
    notIn?: Enumerable<docType> | null
    not?: NestedEnumdocTypeNullableWithAggregatesFilter | docType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumdocTypeNullableFilter
    _max?: NestedEnumdocTypeNullableFilter
  }

  export type usersCreateWithoutCardsInput = {
    email: string
    password: string
    credentials?: credentialsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    notes?: notesCreateNestedManyWithoutUsersInput
    wifi?: wifiCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCardsInput = {
    id?: number
    email: string
    password: string
    credentials?: credentialsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    notes?: notesUncheckedCreateNestedManyWithoutUsersInput
    wifi?: wifiUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCardsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
  }

  export type usersUpsertWithoutCardsInput = {
    update: XOR<usersUpdateWithoutCardsInput, usersUncheckedUpdateWithoutCardsInput>
    create: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
  }

  export type usersUpdateWithoutCardsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    credentials?: credentialsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    notes?: notesUpdateManyWithoutUsersNestedInput
    wifi?: wifiUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    credentials?: credentialsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    notes?: notesUncheckedUpdateManyWithoutUsersNestedInput
    wifi?: wifiUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutCredentialsInput = {
    email: string
    password: string
    cards?: cardsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    notes?: notesCreateNestedManyWithoutUsersInput
    wifi?: wifiCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCredentialsInput = {
    id?: number
    email: string
    password: string
    cards?: cardsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    notes?: notesUncheckedCreateNestedManyWithoutUsersInput
    wifi?: wifiUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCredentialsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCredentialsInput, usersUncheckedCreateWithoutCredentialsInput>
  }

  export type usersUpsertWithoutCredentialsInput = {
    update: XOR<usersUpdateWithoutCredentialsInput, usersUncheckedUpdateWithoutCredentialsInput>
    create: XOR<usersCreateWithoutCredentialsInput, usersUncheckedCreateWithoutCredentialsInput>
  }

  export type usersUpdateWithoutCredentialsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    notes?: notesUpdateManyWithoutUsersNestedInput
    wifi?: wifiUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    notes?: notesUncheckedUpdateManyWithoutUsersNestedInput
    wifi?: wifiUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutDocumentsInput = {
    email: string
    password: string
    cards?: cardsCreateNestedManyWithoutUsersInput
    credentials?: credentialsCreateNestedManyWithoutUsersInput
    notes?: notesCreateNestedManyWithoutUsersInput
    wifi?: wifiCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutDocumentsInput = {
    id?: number
    email: string
    password: string
    cards?: cardsUncheckedCreateNestedManyWithoutUsersInput
    credentials?: credentialsUncheckedCreateNestedManyWithoutUsersInput
    notes?: notesUncheckedCreateNestedManyWithoutUsersInput
    wifi?: wifiUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutDocumentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
  }

  export type usersUpsertWithoutDocumentsInput = {
    update: XOR<usersUpdateWithoutDocumentsInput, usersUncheckedUpdateWithoutDocumentsInput>
    create: XOR<usersCreateWithoutDocumentsInput, usersUncheckedCreateWithoutDocumentsInput>
  }

  export type usersUpdateWithoutDocumentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUpdateManyWithoutUsersNestedInput
    notes?: notesUpdateManyWithoutUsersNestedInput
    wifi?: wifiUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUncheckedUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUncheckedUpdateManyWithoutUsersNestedInput
    notes?: notesUncheckedUpdateManyWithoutUsersNestedInput
    wifi?: wifiUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutNotesInput = {
    email: string
    password: string
    cards?: cardsCreateNestedManyWithoutUsersInput
    credentials?: credentialsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    wifi?: wifiCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutNotesInput = {
    id?: number
    email: string
    password: string
    cards?: cardsUncheckedCreateNestedManyWithoutUsersInput
    credentials?: credentialsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    wifi?: wifiUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutNotesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutNotesInput, usersUncheckedCreateWithoutNotesInput>
  }

  export type usersUpsertWithoutNotesInput = {
    update: XOR<usersUpdateWithoutNotesInput, usersUncheckedUpdateWithoutNotesInput>
    create: XOR<usersCreateWithoutNotesInput, usersUncheckedCreateWithoutNotesInput>
  }

  export type usersUpdateWithoutNotesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    wifi?: wifiUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUncheckedUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    wifi?: wifiUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type cardsCreateWithoutUsersInput = {
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
  }

  export type cardsUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
  }

  export type cardsCreateOrConnectWithoutUsersInput = {
    where: cardsWhereUniqueInput
    create: XOR<cardsCreateWithoutUsersInput, cardsUncheckedCreateWithoutUsersInput>
  }

  export type cardsCreateManyUsersInputEnvelope = {
    data: Enumerable<cardsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type credentialsCreateWithoutUsersInput = {
    title: string
    url: string
    userName: string
    password: string
  }

  export type credentialsUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    url: string
    userName: string
    password: string
  }

  export type credentialsCreateOrConnectWithoutUsersInput = {
    where: credentialsWhereUniqueInput
    create: XOR<credentialsCreateWithoutUsersInput, credentialsUncheckedCreateWithoutUsersInput>
  }

  export type credentialsCreateManyUsersInputEnvelope = {
    data: Enumerable<credentialsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type documentsCreateWithoutUsersInput = {
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
  }

  export type documentsUncheckedCreateWithoutUsersInput = {
    id?: number
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
  }

  export type documentsCreateOrConnectWithoutUsersInput = {
    where: documentsWhereUniqueInput
    create: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput>
  }

  export type documentsCreateManyUsersInputEnvelope = {
    data: Enumerable<documentsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type notesCreateWithoutUsersInput = {
    title: string
    noteText: string
  }

  export type notesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    noteText: string
  }

  export type notesCreateOrConnectWithoutUsersInput = {
    where: notesWhereUniqueInput
    create: XOR<notesCreateWithoutUsersInput, notesUncheckedCreateWithoutUsersInput>
  }

  export type notesCreateManyUsersInputEnvelope = {
    data: Enumerable<notesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type wifiCreateWithoutUsersInput = {
    name: string
    password: string
  }

  export type wifiUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    password: string
  }

  export type wifiCreateOrConnectWithoutUsersInput = {
    where: wifiWhereUniqueInput
    create: XOR<wifiCreateWithoutUsersInput, wifiUncheckedCreateWithoutUsersInput>
  }

  export type wifiCreateManyUsersInputEnvelope = {
    data: Enumerable<wifiCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type cardsUpsertWithWhereUniqueWithoutUsersInput = {
    where: cardsWhereUniqueInput
    update: XOR<cardsUpdateWithoutUsersInput, cardsUncheckedUpdateWithoutUsersInput>
    create: XOR<cardsCreateWithoutUsersInput, cardsUncheckedCreateWithoutUsersInput>
  }

  export type cardsUpdateWithWhereUniqueWithoutUsersInput = {
    where: cardsWhereUniqueInput
    data: XOR<cardsUpdateWithoutUsersInput, cardsUncheckedUpdateWithoutUsersInput>
  }

  export type cardsUpdateManyWithWhereWithoutUsersInput = {
    where: cardsScalarWhereInput
    data: XOR<cardsUpdateManyMutationInput, cardsUncheckedUpdateManyWithoutCardsInput>
  }

  export type cardsScalarWhereInput = {
    AND?: Enumerable<cardsScalarWhereInput>
    OR?: Enumerable<cardsScalarWhereInput>
    NOT?: Enumerable<cardsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    number?: BigIntFilter | bigint | number
    name?: StringFilter | string
    cvc?: IntFilter | number
    date?: DateTimeFilter | Date | string
    password?: StringFilter | string
    isVirtual?: BoolFilter | boolean
    type?: EnumcardTypeNullableFilter | cardType | null
  }

  export type credentialsUpsertWithWhereUniqueWithoutUsersInput = {
    where: credentialsWhereUniqueInput
    update: XOR<credentialsUpdateWithoutUsersInput, credentialsUncheckedUpdateWithoutUsersInput>
    create: XOR<credentialsCreateWithoutUsersInput, credentialsUncheckedCreateWithoutUsersInput>
  }

  export type credentialsUpdateWithWhereUniqueWithoutUsersInput = {
    where: credentialsWhereUniqueInput
    data: XOR<credentialsUpdateWithoutUsersInput, credentialsUncheckedUpdateWithoutUsersInput>
  }

  export type credentialsUpdateManyWithWhereWithoutUsersInput = {
    where: credentialsScalarWhereInput
    data: XOR<credentialsUpdateManyMutationInput, credentialsUncheckedUpdateManyWithoutCredentialsInput>
  }

  export type credentialsScalarWhereInput = {
    AND?: Enumerable<credentialsScalarWhereInput>
    OR?: Enumerable<credentialsScalarWhereInput>
    NOT?: Enumerable<credentialsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    url?: StringFilter | string
    userName?: StringFilter | string
    password?: StringFilter | string
  }

  export type documentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: documentsWhereUniqueInput
    update: XOR<documentsUpdateWithoutUsersInput, documentsUncheckedUpdateWithoutUsersInput>
    create: XOR<documentsCreateWithoutUsersInput, documentsUncheckedCreateWithoutUsersInput>
  }

  export type documentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: documentsWhereUniqueInput
    data: XOR<documentsUpdateWithoutUsersInput, documentsUncheckedUpdateWithoutUsersInput>
  }

  export type documentsUpdateManyWithWhereWithoutUsersInput = {
    where: documentsScalarWhereInput
    data: XOR<documentsUpdateManyMutationInput, documentsUncheckedUpdateManyWithoutDocumentsInput>
  }

  export type documentsScalarWhereInput = {
    AND?: Enumerable<documentsScalarWhereInput>
    OR?: Enumerable<documentsScalarWhereInput>
    NOT?: Enumerable<documentsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    type?: EnumdocTypeNullableFilter | docType | null
    fullName?: StringFilter | string
    issueDate?: DateTimeFilter | Date | string
    expirationDate?: DateTimeFilter | Date | string
    number?: BigIntFilter | bigint | number
    issueInstitution?: StringFilter | string
  }

  export type notesUpsertWithWhereUniqueWithoutUsersInput = {
    where: notesWhereUniqueInput
    update: XOR<notesUpdateWithoutUsersInput, notesUncheckedUpdateWithoutUsersInput>
    create: XOR<notesCreateWithoutUsersInput, notesUncheckedCreateWithoutUsersInput>
  }

  export type notesUpdateWithWhereUniqueWithoutUsersInput = {
    where: notesWhereUniqueInput
    data: XOR<notesUpdateWithoutUsersInput, notesUncheckedUpdateWithoutUsersInput>
  }

  export type notesUpdateManyWithWhereWithoutUsersInput = {
    where: notesScalarWhereInput
    data: XOR<notesUpdateManyMutationInput, notesUncheckedUpdateManyWithoutNotesInput>
  }

  export type notesScalarWhereInput = {
    AND?: Enumerable<notesScalarWhereInput>
    OR?: Enumerable<notesScalarWhereInput>
    NOT?: Enumerable<notesScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    title?: StringFilter | string
    noteText?: StringFilter | string
  }

  export type wifiUpsertWithWhereUniqueWithoutUsersInput = {
    where: wifiWhereUniqueInput
    update: XOR<wifiUpdateWithoutUsersInput, wifiUncheckedUpdateWithoutUsersInput>
    create: XOR<wifiCreateWithoutUsersInput, wifiUncheckedCreateWithoutUsersInput>
  }

  export type wifiUpdateWithWhereUniqueWithoutUsersInput = {
    where: wifiWhereUniqueInput
    data: XOR<wifiUpdateWithoutUsersInput, wifiUncheckedUpdateWithoutUsersInput>
  }

  export type wifiUpdateManyWithWhereWithoutUsersInput = {
    where: wifiScalarWhereInput
    data: XOR<wifiUpdateManyMutationInput, wifiUncheckedUpdateManyWithoutWifiInput>
  }

  export type wifiScalarWhereInput = {
    AND?: Enumerable<wifiScalarWhereInput>
    OR?: Enumerable<wifiScalarWhereInput>
    NOT?: Enumerable<wifiScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    password?: StringFilter | string
  }

  export type usersCreateWithoutWifiInput = {
    email: string
    password: string
    cards?: cardsCreateNestedManyWithoutUsersInput
    credentials?: credentialsCreateNestedManyWithoutUsersInput
    documents?: documentsCreateNestedManyWithoutUsersInput
    notes?: notesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutWifiInput = {
    id?: number
    email: string
    password: string
    cards?: cardsUncheckedCreateNestedManyWithoutUsersInput
    credentials?: credentialsUncheckedCreateNestedManyWithoutUsersInput
    documents?: documentsUncheckedCreateNestedManyWithoutUsersInput
    notes?: notesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutWifiInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWifiInput, usersUncheckedCreateWithoutWifiInput>
  }

  export type usersUpsertWithoutWifiInput = {
    update: XOR<usersUpdateWithoutWifiInput, usersUncheckedUpdateWithoutWifiInput>
    create: XOR<usersCreateWithoutWifiInput, usersUncheckedCreateWithoutWifiInput>
  }

  export type usersUpdateWithoutWifiInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUpdateManyWithoutUsersNestedInput
    documents?: documentsUpdateManyWithoutUsersNestedInput
    notes?: notesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutWifiInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cards?: cardsUncheckedUpdateManyWithoutUsersNestedInput
    credentials?: credentialsUncheckedUpdateManyWithoutUsersNestedInput
    documents?: documentsUncheckedUpdateManyWithoutUsersNestedInput
    notes?: notesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type cardsCreateManyUsersInput = {
    id?: number
    title: string
    number: bigint | number
    name: string
    cvc: number
    date: Date | string
    password: string
    isVirtual: boolean
    type?: cardType | null
  }

  export type credentialsCreateManyUsersInput = {
    id?: number
    title: string
    url: string
    userName: string
    password: string
  }

  export type documentsCreateManyUsersInput = {
    id?: number
    type?: docType | null
    fullName: string
    issueDate: Date | string
    expirationDate: Date | string
    number: bigint | number
    issueInstitution: string
  }

  export type notesCreateManyUsersInput = {
    id?: number
    title: string
    noteText: string
  }

  export type wifiCreateManyUsersInput = {
    id?: number
    name: string
    password: string
  }

  export type cardsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type cardsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type cardsUncheckedUpdateManyWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    cvc?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isVirtual?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumcardTypeFieldUpdateOperationsInput | cardType | null
  }

  export type credentialsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type credentialsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type credentialsUncheckedUpdateManyWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type documentsUpdateWithoutUsersInput = {
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type documentsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type documentsUncheckedUpdateManyWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableEnumdocTypeFieldUpdateOperationsInput | docType | null
    fullName?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    number?: BigIntFieldUpdateOperationsInput | bigint | number
    issueInstitution?: StringFieldUpdateOperationsInput | string
  }

  export type notesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type notesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type notesUncheckedUpdateManyWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    noteText?: StringFieldUpdateOperationsInput | string
  }

  export type wifiUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type wifiUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type wifiUncheckedUpdateManyWithoutWifiInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}